
from typing import Callable
import random
import re

from terraria import Terraria, TerrariaException


def emotion(): return random.choice([
    '–ù–∏—á–µ–≥–æ —Å–µ–±–µ',
    '–û–≥–æ',
    '–í–∞—É',
    '–ê —Ç—ã —Ö–æ—Ä–æ—à',
    '–ü–£–ü–£–ü–£–ú',
    '–ü–ü–ê–ê–ê–ê–ú',
])


def on_show_inventory(terraria: Terraria, groups) -> str:
    inventory = terraria.inventory()
    if len(inventory) == 0:
        return random.choice([
            '–û–π, –∫–∞–∂–µ—Ç—Å—è, —É —Ç–µ–±—è –Ω–∏—á–µ–≥–æ –Ω–µ–µ–µ—Ç üòä',
            '–ù–∏—á–µ–≥–æ –Ω–µ –≤–∏–∂—É. –ö—Ç–æ-—Ç–æ –Ω–∞ –º–µ–ª–∏...ü§≠',
            '–ü—É—Å—Ç–æ! –ù–æ —Ç—ã –Ω–µ –≤–æ–ª–Ω—É–π—Å—è, –∫–æ–≥–¥–∞-—Ç–æ –∏ —è –±—ã–ª –±–µ–¥–Ω—ã–º —Å—Ç—É–¥–µ–Ω—Ç–æ–º ü§ì',
        ])
    else:
        return f'{emotion()}! –£ —Ç–µ–±—è —Ü–µ–ª—ã—Ö {len(inventory)} –ø—Ä–µ–¥–º–µ—Ç–æ–≤! ü´¢\n'\
            + ',\n'.join(map(lambda w: '-> ' + w, map(repr, inventory)))


def on_show_places(terraria: Terraria, groups):
    places = terraria.places()
    if len(places) == 0:
        return random.choice([
            '–¢–µ–±–µ –±—ã —Ö–æ—Ç—å —Ä–∞–∑–æ—á–µ–∫ –≤—ã–π—Ç–∏ –∏–∑ –¥–æ–º–∞ —á—Ç–æ –ª–∏... ü´§',
            '–¢—ã —Å–µ—Ä—å–µ–∑–Ω–æ —Ö–æ–¥–∏–ª(–∞) –¢–û–õ–¨–ö–û –≤ —É–Ω–∏–≤–µ—Ä –≤—Å–µ —ç—Ç–æ –≤—Ä–µ–º—è?! üò≥',
            '–¢—ã –µ—â–µ –Ω–∏—á–µ–≥–æ –Ω–µ –≤–∏–¥–µ–ª(–∞) –≤ —ç—Ç–æ–π –∂–∏–∑–Ω–∏...'
        ])
    return f'{emotion()}! –¢—ã –≤–∏–¥–µ–ª —É–∂–µ {len(places)} –≤–µ—â–µ–π! ü´¢\n'\
        + ',\n'.join(map(lambda w: '-> ' + w, map(repr, places)))


def on_show_available(terraria: Terraria, groups):
    available = terraria.available()
    if len(available) == 0:
        return random.choice([
            '–£ —Ç–µ–±—è –Ω–µ—Ç –±—É–¥—É—â–µ–≥–æ... ü•≤',
            '–°–æ—Å—Ç–æ—è–Ω–∏–µ –±–µ–∑—ã—Å—Ö–æ–¥–Ω–æ—Å—Ç–∏... ü´§',
            '–ù–µ –∑–Ω–∞–µ—à—å, —á—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ? –Ø —Ç–æ–∂–µ. üòê',
        ])
    return f'–ù–µ –∑–Ω–∞–µ—à—å, —á—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ? –ü–æ–ø—Ä–æ–±—É–π –¥–æ–±—ã—Ç—å —á—Ç–æ-–Ω–∏–±—É–¥—å –∏–∑ —ç—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞!\n'\
        + ',\n'.join(map(lambda w: '-> ' + w, map(repr, available)))


def on_action_take(terraria: Terraria, groups):
    name = groups[-2][0] + groups[-2][1:].lower()
    type = groups[-1].lower()
    try:
        if type not in ('ore', 'pickaxe'):
            return '–°—Ç–æ–ø! –ú–æ–∂–Ω–æ –±—Ä–∞—Ç—å —Ç–æ–ª—å–∫–æ ore –∏–ª–∏ pickaxe!'
        terraria.take(f'{type}(\'{name}\')')
        return random.choice([
            f'{emotion()}! –†–∞–¥ –∑–∞ —Ç–µ–±—è, –º–∏–ª–∞—à! üòö',
            f'–ê—Ö, —Ç—ã –∂ –º–æ—è –º–æ–ª–æ–¥—á–∏–Ω–∫–∞',
            f'{emotion()}! –ö—Ä—É—Ç—ã—à–∫–∞!',
        ])
    except TerrariaException as e:
        return random.choice([
            f'–û–π–π–π ü§ï. –ù—É —Ç—ã —á–µ–≥–æ? –ö–∞–∫ –∂–µ –º–æ–∂–Ω–æ –≤–∑—è—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ–µ?',
            f'–í–æ–∑—å–º–∏ –Ω–æ—Ä–º–∞–ª—å–Ω–æ üò°',
            f'–ü—Ä–æ—Å—Ç–æ —Ç–∞–∫ –¥–∞–∂–µ {name} {type} –Ω–µ –≤–æ–∑—å–º–µ—Ç—Å—è! ‚öíÔ∏è',
            f'–í —Å–∫–∞–∑–∫—É –ø–æ–ø–∞–ª(a)? üôÉ'
        ])


def on_action_cheat(terraria: Terraria, groups):
    name = groups[-2][0] + groups[-2][1:].lower()
    type = groups[-1].lower()
    if type not in ('ore', 'pickaxe'):
        return f'–°—Ç–æ–ø! –ú–æ–∂–Ω–æ –±—Ä–∞—Ç—å —Ç–æ–ª—å–∫–æ ore –∏–ª–∏ pickaxe, –Ω–æ –Ω–∏–∫–∞–∫ –Ω–µ {type}!'
    terraria.cheat(f"{type}('{name}')")
    return random.choice([
        '–û–±–º–∞–Ω—ã–≤–∞–µ—à—å –º–µ–Ω—è... –ù—É, –ª–∞–¥–Ω–æ, –ø–µ—Ä–≤—ã–π –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑. üò§',
        '–õ–∞–¥–Ω–æ, –Ω–æ —Ç–æ–ª—å–∫–æ –ø–æ—Ç–æ–º—É —á—Ç–æ –º—ã –¥—Ä—É–∑—å—è. –ú—ã –∂–µ –¥—Ä—É–∑—å—è?.. ü•∂',
        '–ß–µ–≥–æ —Ç–æ–ª—å–∫–æ –Ω–µ —Å–¥–µ–ª–∞–µ—à—å —Ä–∞–¥–∏ –¥—Ä—É–≥–∞. –õ–∞–¥–Ω–æ! ü§´'
    ])


def on_action_explore(terraria: Terraria, groups):
    name = groups[-2][0] + groups[-2][1:].lower()
    type = groups[-1].lower()
    if type not in ('evil_biome', 'ore'):
        return f'–ù—É evil_biome –∏ ore –µ—â–µ –∫—É–¥–∞ –Ω–µ —à–ª–æ, –Ω–æ {type}... –¢—ã —á–µ–≥–æ, –∑–∞–π—á–∏–∫?'
    terraria.explore(f'{type}(\'{name}\')')
    return random.choice([
        f'–ù–∞—à–µ–ª {name} {type}? –¢–µ–ø–µ—Ä—å –ø–æ–ø—Ä–æ–±—É–π –Ω–∞–π—Ç–∏ —Å–µ–±–µ —Ç—è–Ω–æ—á–∫—É. üòÜ',
        '–ê –≤—ã –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–Ω–Ω–∏–∫. –ú–æ–ª–æ–¥–æ–π –ê—Ñ–∞–Ω–∞—Å–∏–π-–ù–∏–∫–∏—Ç–∏–Ω?',
        f'{emotion()}! –ù—É –∏ –Ω–∞—Ö–æ–¥–∫–∞!',
    ])


def on_check_is_ready_for_hardmode(terraria: Terraria, groups):
    if terraria.is_ready_for_hardmode():
        return random.choice([
            f'{emotion()}! –ú–æ–ª–æ–¥–µ—Ü, —Ç–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è –≤–æ –≤—Ç–æ—Ä–æ–π –º–æ–¥—É–ª—å!',
            '–î–∞, –ø–æ—á–µ–º—É –±—ã –∏ –Ω–µ—Ç, –≤–∞–ª—è–π, —á–∏–±—Ä–∏–∫!',
        ])
    return random.choice([
        '–ù–µ —Ç–æ—Ä–æ–ø–∏—Å—å, —Å–Ω–∞—á–∞–ª–∞ —Ç–µ–±–µ –Ω—É–∂–Ω–∞ –∞–¥—Å–∫–∞—è –∫–∏—Ä–∫–∞.',
        '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç—ã –ø–æ–∫–∞ –Ω–µ –≥–æ—Ç–æ–≤(–∞)',
        '–î–∞ –∫–∞–∫–æ–π —Ç–µ–±–µ —Ö–∞—Ä–¥–º–æ–¥, –º–∏–ª–∞—à?',
        '–ù–µ —Ç–æ—Ä–æ–ø–∏ –∂–∏–∑–Ω—å',
    ])


def on_check_is_able_to_craft_both_evil_pickaxe(terraria: Terraria, groups):
    if terraria.is_able_to_craft_both_evil_pickaxe():
        return random.choice([
            '–ö–∞–∫ –≤—ã —ç—Ç–æ–≥–æ –¥–æ–±–∏–ª–∏—Å—å?',
            f'{emotion()}! –ú–æ–∂–µ—à—å!'
        ])
    return random.choice([
        '–ö–∞–∂–µ—Ç—Å—è, —á—Ç–æ –Ω–µ—Ç.',
        '–ù–µ-–∞',
        'üòî',
    ])


def on_check_is_able_to_break_all_explored_ores(terraria: Terraria, groups):
    if terraria.is_able_to_break_all_explored_ores():
        return random.choice([
            '–î–∞, —Ç—ã –º–æ–∂–µ—à—å',
            '–£–≥—É',
        ])
    return random.choice([
        '–ë—Ä–æ, –Ω—É–∂–Ω–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è',
        '–ù—É–∂–Ω–æ –±–æ–ª—å—à–µ –∫–∏—Ä–æ–∫ –∫–æ—Ä–æ–ª—é –∫–∏—Ä–æ–∫',
    ])


def on_error(terraria: Terraria, groups):
    return random.choice([
        '–°–æ –º–Ω–æ–π –Ω—É–∂–Ω–æ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å —á–µ—Ä–µ–∑ —á–∞—Ç. –ß–∞—Ç —è –¥–∞–ª–∞. –ß—Ç–æ–±—ã –∑–Ω–∞—Ç—å, —á—Ç–æ —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å, –Ω—É–∂–µ–Ω –≥–∞–π–¥. –ì–∞–π–¥ —è –Ω–µ –¥–∞–º.',
        '–ù–∏—á–µ–≥–æ –Ω–µ –ø–æ–Ω—è–ª, –Ω–æ –æ—á–µ–Ω—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ! üòÅ',
        '–ü—Ä–æ—Å—Ç–∏... —è —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é...üòî',
        '–ù–µ –ø–æ–Ω, –ø–æ–ø—Ä–æ–±—É–π –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞—Ç—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ üßê'
    ])


class Feedback:
    def __init__(self, terraria: Terraria):
        self.terraria = terraria
        self.patterns = {
            r'.*–≤.*—Å—É–º–∫–µ.*': on_show_inventory,
            r'.*—É—Å–ø–µ–ª.*(–ø–æ–≤–∏–¥–∞—Ç—å|—É–≤–∏–¥–µ—Ç—å).*': on_show_places,
            r'.*(–¥–æ—Å—Ç—É–ø–Ω–æ|—è –º–æ–≥—É|—Å–ø–æ—Å–æ–±–µ–Ω).*': on_show_available,
            r'.*(–Ω—É+)?.*—è( –∂–µ )? .*(—á–µ—Å—Ç–Ω–æ|–ø—Ä–∞–≤–¥–∞).*–Ω–∞—à–µ+–ª (\w+) (\w+).*': on_action_cheat,
            r'.*(–Ω–∞—à–µ–ª|—Å–æ–±—Ä–∞–ª|—Å–¥–µ–ª–∞–ª|–≤–∑—è–ª|–¥–æ–±—ã–ª) (\w+) (\w+).*': on_action_take,
            r'.*—è .*–±—ã–ª (–ø—Ä—è–º–æ? )?((—É)|(—Ä—è–¥–æ–º —Å)|(–ø–æ–±–ª–∏–∑–æ—Å—Ç–∏ –∫)) ([a-zA-z_]+) ([a-zA-z_]+).*': on_action_explore,
            r'.*–ø–æ—Ä–∞.* –≤ —Ö–∞—Ä–¥–º–æ–¥.*': on_check_is_ready_for_hardmode,
            r'.*–Ω–∞ –¥–≤—É—Ö —Å—Ç—É–ª—å—è—Ö.*': on_check_is_able_to_craft_both_evil_pickaxe,
            r'.*—Å–ª–æ–º(–∞—Ç—å|–∞—é).* –≤—Å–µ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Ä—É–¥—ã.*': on_check_is_able_to_break_all_explored_ores,
        }
        self.fallback = on_error

    def answer(self, input: str) -> str:
        for pattern in self.patterns:
            match = re.match(pattern, input, re.IGNORECASE)
            if match is None:
                continue
            try:
                return self.patterns[pattern](
                    self.terraria, match.groups())
            except Exception as e:
                print('Error', e)
                return '–Ø —É–º–∏—Ä–∞—é, –ø—Ä–æ—Å—Ç–∏... –ü—Ä–æ—â–∞–π, –¥—Ä—É–≥! ü§ß'
        else:
            return self.fallback(self.terraria, None)
